
MCU_oving_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000070  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000309  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001f7  00000000  00000000  000005a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000023e  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000008c  00000000  00000000  000009d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001a2  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000011a  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000040  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	51 c0       	rjmp	.+162    	; 0xa8 <__bad_interrupt>
   6:	00 00       	nop
   8:	4f c0       	rjmp	.+158    	; 0xa8 <__bad_interrupt>
   a:	00 00       	nop
   c:	4d c0       	rjmp	.+154    	; 0xa8 <__bad_interrupt>
   e:	00 00       	nop
  10:	4b c0       	rjmp	.+150    	; 0xa8 <__bad_interrupt>
  12:	00 00       	nop
  14:	49 c0       	rjmp	.+146    	; 0xa8 <__bad_interrupt>
  16:	00 00       	nop
  18:	47 c0       	rjmp	.+142    	; 0xa8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	45 c0       	rjmp	.+138    	; 0xa8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	43 c0       	rjmp	.+134    	; 0xa8 <__bad_interrupt>
  22:	00 00       	nop
  24:	41 c0       	rjmp	.+130    	; 0xa8 <__bad_interrupt>
  26:	00 00       	nop
  28:	3f c0       	rjmp	.+126    	; 0xa8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3d c0       	rjmp	.+122    	; 0xa8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	3b c0       	rjmp	.+118    	; 0xa8 <__bad_interrupt>
  32:	00 00       	nop
  34:	39 c0       	rjmp	.+114    	; 0xa8 <__bad_interrupt>
  36:	00 00       	nop
  38:	37 c0       	rjmp	.+110    	; 0xa8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	35 c0       	rjmp	.+106    	; 0xa8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	33 c0       	rjmp	.+102    	; 0xa8 <__bad_interrupt>
  42:	00 00       	nop
  44:	31 c0       	rjmp	.+98     	; 0xa8 <__bad_interrupt>
  46:	00 00       	nop
  48:	2f c0       	rjmp	.+94     	; 0xa8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2d c0       	rjmp	.+90     	; 0xa8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	2b c0       	rjmp	.+86     	; 0xa8 <__bad_interrupt>
  52:	00 00       	nop
  54:	29 c0       	rjmp	.+82     	; 0xa8 <__bad_interrupt>
  56:	00 00       	nop
  58:	27 c0       	rjmp	.+78     	; 0xa8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	25 c0       	rjmp	.+74     	; 0xa8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	23 c0       	rjmp	.+70     	; 0xa8 <__bad_interrupt>
  62:	00 00       	nop
  64:	21 c0       	rjmp	.+66     	; 0xa8 <__bad_interrupt>
  66:	00 00       	nop
  68:	1f c0       	rjmp	.+62     	; 0xa8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1d c0       	rjmp	.+58     	; 0xa8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	1b c0       	rjmp	.+54     	; 0xa8 <__bad_interrupt>
  72:	00 00       	nop
  74:	19 c0       	rjmp	.+50     	; 0xa8 <__bad_interrupt>
  76:	00 00       	nop
  78:	17 c0       	rjmp	.+46     	; 0xa8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	15 c0       	rjmp	.+42     	; 0xa8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	13 c0       	rjmp	.+38     	; 0xa8 <__bad_interrupt>
  82:	00 00       	nop
  84:	11 c0       	rjmp	.+34     	; 0xa8 <__bad_interrupt>
  86:	00 00       	nop
  88:	0f c0       	rjmp	.+30     	; 0xa8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	0d c0       	rjmp	.+26     	; 0xa8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	0b c0       	rjmp	.+22     	; 0xa8 <__bad_interrupt>
  92:	00 00       	nop
  94:	09 c0       	rjmp	.+18     	; 0xa8 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61
  a4:	60 d0       	rcall	.+192    	; 0x166 <main>
  a6:	7c c0       	rjmp	.+248    	; 0x1a0 <_exit>

000000a8 <__bad_interrupt>:
  a8:	ab cf       	rjmp	.-170    	; 0x0 <__vectors>

000000aa <switch_init>:
 */ 
#include <avr/io.h>

void switch_init(void)
{
	for(int i = 1; i < 8; i += 2)
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
	{
		DDRB &= ~(1 << i);
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	64 b1       	in	r22, 0x04	; 4
  b4:	9a 01       	movw	r18, r20
  b6:	08 2e       	mov	r0, r24
  b8:	02 c0       	rjmp	.+4      	; 0xbe <switch_init+0x14>
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <switch_init+0x10>
  c2:	20 95       	com	r18
  c4:	26 23       	and	r18, r22
  c6:	24 b9       	out	0x04, r18	; 4
 */ 
#include <avr/io.h>

void switch_init(void)
{
	for(int i = 1; i < 8; i += 2)
  c8:	02 96       	adiw	r24, 0x02	; 2
  ca:	89 30       	cpi	r24, 0x09	; 9
  cc:	91 05       	cpc	r25, r1
  ce:	89 f7       	brne	.-30     	; 0xb2 <switch_init+0x8>
	{
		DDRB &= ~(1 << i);
	}
}
  d0:	08 95       	ret

000000d2 <switch_read>:
int switch_read(int button_number)
{
	if (PINB & (1<<(button_number*2 + 1)))
  d2:	23 b1       	in	r18, 0x03	; 3
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <switch_read+0x10>
  de:	35 95       	asr	r19
  e0:	27 95       	ror	r18
  e2:	8a 95       	dec	r24
  e4:	e2 f7       	brpl	.-8      	; 0xde <switch_read+0xc>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	20 ff       	sbrs	r18, 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <switch_read+0x20>
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
	{
		return 0;
	}
	return 1;
}
  f2:	08 95       	ret

000000f4 <led_init>:
 */ 
#include <avr/io.h>

void led_init(void)
{
	for(int i = 0; i < 8; i += 2)
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
	{
		DDRB |= (1 << i);
  f8:	41 e0       	ldi	r20, 0x01	; 1
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	64 b1       	in	r22, 0x04	; 4
  fe:	9a 01       	movw	r18, r20
 100:	08 2e       	mov	r0, r24
 102:	02 c0       	rjmp	.+4      	; 0x108 <led_init+0x14>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <led_init+0x10>
 10c:	36 2f       	mov	r19, r22
 10e:	32 2b       	or	r19, r18
 110:	34 b9       	out	0x04, r19	; 4
		PORTB |= (1 << i);
 112:	35 b1       	in	r19, 0x05	; 5
 114:	23 2b       	or	r18, r19
 116:	25 b9       	out	0x05, r18	; 5
 */ 
#include <avr/io.h>

void led_init(void)
{
	for(int i = 0; i < 8; i += 2)
 118:	02 96       	adiw	r24, 0x02	; 2
 11a:	88 30       	cpi	r24, 0x08	; 8
 11c:	91 05       	cpc	r25, r1
 11e:	71 f7       	brne	.-36     	; 0xfc <led_init+0x8>
	{
		DDRB |= (1 << i);
		PORTB |= (1 << i);
	}
}
 120:	08 95       	ret

00000122 <led_set>:

void led_set(int led_number, int led_value)
{
	if (led_value > 0)
 122:	16 16       	cp	r1, r22
 124:	17 06       	cpc	r1, r23
 126:	84 f4       	brge	.+32     	; 0x148 <led_set+0x26>
	{
		PORTB &= ~((1 << led_number*2));
 128:	65 b1       	in	r22, 0x05	; 5
 12a:	9c 01       	movw	r18, r24
 12c:	22 0f       	add	r18, r18
 12e:	33 1f       	adc	r19, r19
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	ca 01       	movw	r24, r20
 136:	02 c0       	rjmp	.+4      	; 0x13c <led_set+0x1a>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	2a 95       	dec	r18
 13e:	e2 f7       	brpl	.-8      	; 0x138 <led_set+0x16>
 140:	80 95       	com	r24
 142:	86 23       	and	r24, r22
 144:	85 b9       	out	0x05, r24	; 5
 146:	08 95       	ret
	}
	else
	{
		PORTB |= (1 << (led_number*2));
 148:	65 b1       	in	r22, 0x05	; 5
 14a:	9c 01       	movw	r18, r24
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	ca 01       	movw	r24, r20
 156:	02 c0       	rjmp	.+4      	; 0x15c <led_set+0x3a>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	2a 95       	dec	r18
 15e:	e2 f7       	brpl	.-8      	; 0x158 <led_set+0x36>
 160:	86 2b       	or	r24, r22
 162:	85 b9       	out	0x05, r24	; 5
 164:	08 95       	ret

00000166 <main>:
#include "led.h"


int main(void)
{
	led_init();
 166:	c6 df       	rcall	.-116    	; 0xf4 <led_init>
	switch_init();
 168:	a0 df       	rcall	.-192    	; 0xaa <switch_init>
	led_set(2,1);
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	d7 df       	rcall	.-82     	; 0x122 <led_set>
    while(1)
    {
		for (int i = 0; i < 4; i++)
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if (switch_read(i) == HIGH)
 178:	ce 01       	movw	r24, r28
 17a:	ab df       	rcall	.-170    	; 0xd2 <switch_read>
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	29 f4       	brne	.+10     	; 0x18a <main+0x24>
			{
				led_set(i,HIGH);
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	ce 01       	movw	r24, r28
 186:	cd df       	rcall	.-102    	; 0x122 <led_set>
 188:	04 c0       	rjmp	.+8      	; 0x192 <main+0x2c>
			}
			else
			{
				led_set(i,LOW);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	ce 01       	movw	r24, r28
 190:	c8 df       	rcall	.-112    	; 0x122 <led_set>
	led_init();
	switch_init();
	led_set(2,1);
    while(1)
    {
		for (int i = 0; i < 4; i++)
 192:	21 96       	adiw	r28, 0x01	; 1
 194:	c4 30       	cpi	r28, 0x04	; 4
 196:	d1 05       	cpc	r29, r1
 198:	7c f3       	brlt	.-34     	; 0x178 <main+0x12>
 19a:	c0 e0       	ldi	r28, 0x00	; 0
 19c:	d0 e0       	ldi	r29, 0x00	; 0
 19e:	ec cf       	rjmp	.-40     	; 0x178 <main+0x12>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
